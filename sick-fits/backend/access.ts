/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { ListAccessArgs } from './types';
import { permissionsList } from './schemas/fields';

// At it's simplest, the access control returns a yes or no value depending on the users session
export const isSignedIn = ({ session }: ListAccessArgs) => !!session;

/* 

generatedPermissions utilizes the permissionsList array to generate a new object 
with same keys as the permissionsList array, but assigns methods
to each key that return a boolean value based on whether the user has the
permission or not on their session token. 

The methods are generated by mapping over the permissionsList
array and creating an array of arrays with the first element being the permission
and the second element being a function that returns a boolean value based on the
user's session data. The Object.fromEntries method is then used to convert the array
of arrays into an object. 
*/

// Permissions methods to check if someone meets a criteria - yes or no
// eslint-disable-next-line @typescript-eslint/no-unsafe-call
export const generatedPermissions = Object.fromEntries(
  permissionsList.map((permission) => [
    permission,
    ({ session }: ListAccessArgs) => !!session?.data.role?.[permission],
  ])
);

/*  Original permissions object with methods written out
export const permissions = {
  canManageProducts({ session }: ListAccessArgs) {
    return session?.data.role?.canManageProducts;
  },
  canSeeOtherUsers({ session }: ListAccessArgs) {
    return session?.data.role?.canSeeOtherUsers;
  },
  canManageUsers({ session }: ListAccessArgs) {
    return session?.data.role?.canManageUsers;
  },
  canManageRoles({ session }: ListAccessArgs) {
    return session?.data.role?.canManageRoles;
  },
  canManageCart({ session }: ListAccessArgs) {
    return session?.data.role?.canManageCart;
  },
  canManageOrders({ session }: ListAccessArgs) {
    return session?.data.role?.canManageOrders;
  },
};
*/

export const permissions = {
  ...generatedPermissions,
};

// Rule based function
// Rules can return a boolean - yes or no - or a filter which limits which products they can CRUD.
export const rules = {
  canManageProducts({ session }: ListAccessArgs) {
    if (!isSignedIn({ session })) {
      return false;
    }
    // check to see if permission is on user data in session
    if (permissions.canManageProducts({ session })) {
      return true;
    }
    return { user: { id: session.itemId } }; // check to see if the own this item
  },
  canOrder({ session }: ListAccessArgs) {
    if (!isSignedIn({ session })) {
      return false;
    }
    // check to see if permission is on user data in session
    if (permissions.canManageCart({ session })) {
      return true;
    }
    return { user: { id: session.itemId } }; // user can only update their own order items
  },
  canManageOrderItems({ session }: ListAccessArgs) {
    if (!isSignedIn({ session })) {
      return false;
    }
    // check to see if permission is on user data in session
    if (permissions.canManageCart({ session })) {
      return true;
    }
    return { order: { user: { id: session.itemId } } }; // user can only update their own order items
  },
  canReadProducts({ session }: ListAccessArgs) {
    if (!isSignedIn({ session })) {
      return false;
    }
    // check the session object for permissions set to te user data object
    if (permissions.canManageProducts({ session })) {
      return true; // they can read everything
    }
    // they should only see available products (based on the status field)
    return { status: 'AVAILABLE' }; // uses a where clause to filter only available products
  },
};
